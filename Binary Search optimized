import java.util.Arrays;

public class BinarySearch {

    int binarysearch(int arr[], int n, int k) {
        Arrays.sort(arr);
        int temp=Arrays.binarySearch(arr,k);
        if(temp<0){
            return -1;
        }
        return temp;
        //above is the working method which passed all test cases
        
// below code excedes time complexity
       /* int left=0;
        int right=n-1;
        int mid=0;
        if (left>right){
            return -1;
        }
        else {
            while (k!=arr[mid]) {
                mid = (left + right) / 2;
                if (k == arr[mid]) {
                    return mid;
                } else if (k < arr[mid]) {
                    right = mid - 1;
                } else if (k > arr[mid]) {
                    left = mid + 1;
                }
            }
        }
        return mid;*/
    }
    public static void main(String args[]) {
        BinarySearch B = new BinarySearch();
        int[] Z= {4, 2, 1,65,45,34,9,23,21, 5, 3};
        System.out.println(B.binarysearch(Z,Z.length,65));
    }
}
