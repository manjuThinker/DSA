import java.util.*;

class PairWithGivenSumInASortedArray {

    int Countpair(int a[], int n, int sum)
    {
        int count=0;
        for (int i=0;i<a.length;i++) {
            for (int j = i + 1; j < a.length; j++) {
                if (a[i] + a[j] == sum) {
                    count++;
                }
            }
        }
        if(count==0){
            return -1;
        }

        return count;

    }
    //Solution 2 for lees time complexity
    int Countpair2(int a[], int n, int sum) {

        // Complete the function

        HashSet<Integer> s = new HashSet <>();
        int count = 0;
        for(int i = 0; i < n; i++) {
            if(s.contains(sum - a[i])) {
                count++;

            }
            s.add(a[i]);
        }
        if(count > 0) {
            return count;
        } else {
            return -1;
        }
    }
    public static void main(String args[]) {
        PairWithGivenSumInASortedArray X = new PairWithGivenSumInASortedArray();
        int[] C= {1, 2, 3, 4, 5, 6, 7};
        System.out.println(X.Countpair(C,C.length,8));
    }
} 

